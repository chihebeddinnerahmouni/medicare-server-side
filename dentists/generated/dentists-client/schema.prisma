// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Images {
//   id        Int      @id @default(autoincrement())
//   url       String
//   cabinetId Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model availabilities {
//   id        Int      @id @default(autoincrement())
//   cabinetId Int
//   start_date      String
//   end_date        String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model Services {
//   id                Int               @id @default(autoincrement())
//   name              String
//   createdAt         DateTime          @default(now())
//   updatedAt         DateTime          @updatedAt
//   Cabinets          Cabinet[]         @relation("PricingServices")
//   PricingServices   PricingServices[]
//   nonPricingServices Cabinet[]
// }

// model Reviews {
//   id        Int      @id @default(autoincrement())
//   comment   String
//   userId    Int
//   cabinetId Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model Cabinet {
//   id              Int                @id @default(autoincrement())
//   title            String
//   images          Images[]
//   description     String
//   address         String
//   phone           String
//   totalViews      Int                @default(0)
//   totalRate       Int                @default(0)
//   numberOfRates   Int                @default(0)
//   averageRate     Float              @default(0)
//   availabilities  availabilities[]
//   ownerId         Int
//   year      Int
//   services        Services[]         @relation("PricingServices")
//   validated       Boolean
//   blocked         Boolean
//   Reviews         Reviews[]
//   rates           Json
//   openTime        String
//   closeTime       String
//   latitude        String
//   longitude       String
//   reviewsCount    Int                @default(0)
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
//   PricingServices PricingServices[]
//   nonPricingServices Services[]
// }

// model PricingServices {
//   cabinetId Int
//   serviceId Int
//   service_name String
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
//   Services  Services @relation(fields: [serviceId], references: [id])

//   @@id([cabinetId, serviceId])
// }
generator client {
  provider = "prisma-client-js"
  output   = "../generated/dentists-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  dentistId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Dentist   Dentists @relation(fields: [dentistId], references: [id])
}

model availabilities {
  id         Int      @id @default(autoincrement())
  dentistId  Int
  start_date String
  end_date   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dentist    Dentists @relation(fields: [dentistId], references: [id])
}

model Services {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    Int
  dentistId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Dentist   Dentists @relation(fields: [dentistId], references: [id])
}

model Dentists {
  id                 Int                  @id @default(autoincrement())
  title              String
  images             Images[]
  description        String
  address            String
  phone              String
  totalViews         Int                  @default(0)
  totalRate          Int                  @default(0)
  numberOfRates      Int                  @default(0)
  averageRate        Float                @default(0)
  availabilities     availabilities[]
  ownerId            Int
  year               Int
  validated          Boolean
  blocked            Boolean
  Reviews            Reviews[]
  rates              Json
  openTime           String
  closeTime          String
  latitude           String
  longitude          String
  daysOff            Int[]                @default([])
  reviewsCount       Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PricingServices    PricingServices[]
  nonPricingServices NonPricingServices[]
}

model PricingServices {
  id           Int      @id @default(autoincrement())
  dentistId    Int
  service_name String
  price        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  dentist      Dentists @relation(fields: [dentistId], references: [id])
}

model NonPricingServices {
  id           Int      @id @default(autoincrement())
  dentistId    Int
  service_name String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  dentist      Dentists @relation(fields: [dentistId], references: [id])
}
