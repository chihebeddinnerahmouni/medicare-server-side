// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Images {
//   id        Int      @id @default(autoincrement())
//   url       String
//   cabinetId Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model availabilities {
//   id        Int      @id @default(autoincrement())
//   cabinetId Int
//   start_date      String
//   end_date        String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model Services {
//   id                Int               @id @default(autoincrement())
//   name              String
//   createdAt         DateTime          @default(now())
//   updatedAt         DateTime          @updatedAt
//   Cabinets          Cabinet[]         @relation("CabinetServices")
//   CabinetServices   CabinetServices[]
// }

// model Reviews {
//   id        Int      @id @default(autoincrement())
//   comment   String
//   userId    Int
//   cabinetId Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
// }

// model Cabinet {
//   id              Int                @id @default(autoincrement())
//   title            String
//   images          Images[]
//   description     String
//   address         String
//   phone           String
//   totalViews      Int                @default(0)
//   totalRate       Int                @default(0)
//   numberOfRates   Int                @default(0)
//   averageRate     Float              @default(0)
//   availabilities  availabilities[]
//   ownerId         Int
//   services        Services[]         @relation("CabinetServices")
//   validated       Boolean
//   blocked         Boolean
//   Reviews         Reviews[]
//   rates           Json
//   openTime        String
//   closeTime       String
//   latitude        String
//   longitude       String
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
//   CabinetServices CabinetServices[]
// }

// model CabinetServices {
//   cabinetId Int
//   serviceId Int
//   service_name String
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
//   Services  Services @relation(fields: [serviceId], references: [id])

//   @@id([cabinetId, serviceId])
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  cabinetId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
}

model availabilities {
  id        Int      @id @default(autoincrement())
  cabinetId Int
  start_date      String
  end_date        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
}

model Services {
  id                Int               @id @default(autoincrement())
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Cabinets          Cabinet[]         @relation("CabinetServices")
  CabinetServices   CabinetServices[]
}

model Reviews {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    Int
  cabinetId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
}

model specialities {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cabinets  Cabinet[]
}

model Cabinet {
  id              Int                @id @default(autoincrement())
  title            String
  specialityId    Int
  images          Images[]
  description     String
  address         String
  phone           String
  totalViews      Int                @default(0)
  totalRate       Int                @default(0)
  numberOfRates   Int                @default(0)
  averageRate     Float              @default(0)
  availabilities  availabilities[]
  ownerId         Int
  year      Int
  services        Services[]         @relation("CabinetServices")
  validated       Boolean
  blocked         Boolean
  Reviews         Reviews[]
  rates           Json
  openTime        String
  closeTime       String
  latitude        String
  longitude       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  CabinetServices CabinetServices[]
  speciality    specialities       @relation(fields: [specialityId], references: [id])
}

model CabinetServices {
  cabinetId Int
  serviceId Int
  service_name String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
  Services  Services @relation(fields: [serviceId], references: [id])

  @@id([cabinetId, serviceId])
}

