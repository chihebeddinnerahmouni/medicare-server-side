generator client {
  provider = "prisma-client-js"
  output   = "../generated/clinics-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  clinicId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic   Clinics  @relation(fields: [clinicId], references: [id])
}

model availabilities {
  id        Int      @id @default(autoincrement())
  clinicId Int
  start_date      String
  end_date        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic   Clinics  @relation(fields: [clinicId], references: [id])
}

model Services {
  id                Int               @id @default(autoincrement())
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Reviews {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    Int
  clinicId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic   Clinics  @relation(fields: [clinicId], references: [id])
}


model Clinics {
  id              Int                @id @default(autoincrement())
  title           String
  images          Images[]
  description     String
  address         String
  phone           String
  totalViews      Int                @default(0)
  totalRate       Int                @default(0)
  numberOfRates   Int                @default(0)
  averageRate     Float              @default(0)
  availabilities  availabilities[]
  ownerId         Int
  year            Int
  validated       Boolean
  blocked         Boolean
  type            String             @default("clinic")
  Reviews         Reviews[]
  rates           Json
  openTime        String
  closeTime       String
  latitude        String
  longitude       String
  daysOff         Int[]              @default([])
  reviewsCount    Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  PricingServices PricingServices[]
  nonPricingServices NonPricingServices[]
}

model PricingServices {
  id        Int      @id @default(autoincrement())
  clinicId Int
  service_name String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic   Clinics  @relation(fields: [clinicId], references: [id])
}

model NonPricingServices {
  id        Int      @id @default(autoincrement())
  clinicId Int
  service_name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic   Clinics  @relation(fields: [clinicId], references: [id])
}